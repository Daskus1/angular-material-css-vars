// main overwrite to make it all work
@function mat-color($palette, $hue: default, $opacity: null) {
  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return mat-color($palette, default, $hue);
  }

  $color: map-get($palette, $hue);

  @if type-of($color) == color {
    @return rgba($color, if($opacity == null, opacity($color), $opacity));
  } @else {
    $default-opacity: if($opacity == null, 1, $opacity);
    $inner-var-alpha-str: str-slice($color, 5, -2) + '-alpha';
    // if we have a corresponding alpha variable use it
    @if (map_get($mat-css-default-light-theme, $inner-var-alpha-str)) {
      @return rgba($color, _mat-css-str-replace($color, ')', "-alpha, #{$default-opacity})"));
    } @else {
      @return rgba($color, $default-opacity);
    }
  }
}

// also needs to be overwritten, as otherwise we end up with opacity and alpha value
@mixin mat-ripple-theme($theme) {
  $foreground: map_get($theme, foreground);
  $foreground-base: map_get($foreground, base);

  .mat-ripple-element {
    // if it's a color, rgba just works.
    // If it's a variable, rgba works because all color variables should be 3 comma separated numbers
    background-color: rgba($foreground-base, $mat-ripple-color-opacity);
  }
}

// The material mixin passes an opacity to mat-color and also adds opacity to the element if the background-color is not of type 'color'.
// This would cause the opacity to get applied twice, resulting in a ripple that is almost invisible.
// Instead, we will trust that mat-color handles opacity correctly.
@mixin _mat-button-ripple-background($palette, $hue, $opacity) {
  $background-color: mat-color($palette, $hue, $opacity);
  background-color: $background-color;
}

@mixin mat-css-other-overwrites {
  .mat-button-focus-overlay {
    background: RGBA(var(--palette-foreground-base), 1);
  }
  .mat-checkbox .mat-ripple-element {
    background-color: RGB(var(--palette-foreground-base));
  }
  .mat-option.mat-option-disabled {
    color: rgba(var(--palette-foreground-hint-text), 0.38);
  }
}
