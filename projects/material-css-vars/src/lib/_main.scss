@import 'variables';
@import '~@angular/material/theming';
@import 'internal-helper';
@import 'public-util';
// contains main overwrite of `mat-color` to make it all work
// needs to come after '~@angular/material/theming'
@import 'mat-lib-overwrites';

@mixin initCssVars($default-theme, $text) {
  // init css variables
  @include _mat-css-root($text);
  @include _mat-css-root($default-theme);
}

@mixin initMatTheme($dark-theme-selector) {
  @include mat-core();

  $primary: mat-palette($mat-css-palette-primary);
  $accent: mat-palette($mat-css-palette-accent);
  $warn: mat-palette($mat-css-palette-warn);

  $theme: mat-light-theme($primary, $accent, $warn);
  $dark-theme: mat-dark-theme($primary, $accent, $warn);

  $theme: map_merge($theme, (
    background: $mat-css-palette-background,
    foreground: $mat-css-palette-foreground,
  ));
  // set global variable so passed-in content can use the theme
  $mat-css-theme: $theme !global; 

  @at-root {
    // NOTE: light theme is the default theme
    @include angular-material-theme($theme);
    @content;

    @if $dark-theme-selector {
      $mat-css-theme: $dark-theme !global;
      #{$dark-theme-selector} {
        @include angular-material-theme($dark-theme);
        // add content passed in, which can use the $theme variable to apply the dark theme to 
        // other theme mixins needed by the app
        @content; 
      }
    }
  }

  @include mat-css-other-overwrites;

  $mat-css-theme: null !global; 
}

@mixin initMaterialCssVars(
  $default-theme: $mat-css-default-light-theme,
  $dark-theme-selector: $mat-css-dark-theme-selector,
  $default-theme-text: $mat-css-text
) {
  @include initCssVars($default-theme, $default-theme-text);
  @include initMatTheme($dark-theme-selector) {
    @content;
  };
}
